class Solution {
public:
    static bool compare(const pair<string, int>& a, const pair<string, int>& b) {
        if (a.second == b.second) {
            return a.first < b.first;
        }
        return a.second > b.second;
    }

    vector<string> topKFrequent(vector<string>& words, int k) {
        unordered_map<string, int> mpp;
        vector<string> ans;

        for (int i = 0; i < words.size(); i++) {
            mpp[words[i]]++;
        }

        vector<pair<string, int>> freq;

        for (auto a : mpp) {
            freq.push_back(a);
        }

        sort(freq.begin(), freq.end(), compare);

        for (auto a : freq) {
            ans.push_back(a.first);
            k--;

            if (k == 0) {
                break;
            }
        }

        return ans;
    }
};
