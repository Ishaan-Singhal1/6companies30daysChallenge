/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* merge(ListNode* list1, ListNode* list2) {
        if(list1==NULL){
            return list2;
        }
        if (list2==NULL){
            return list1;
        }
        ListNode* h1=list1;
        ListNode* h2=list2;
        ListNode* final_head=NULL;
        ListNode* t=NULL;
        if(h1->val<h2->val){
            final_head=h1;
            t=h1;
            h1=h1->next;
        } else {
            final_head=h2;
            t=h2;
            h2=h2->next;
        }
        while(h1!=NULL && h2!=NULL){
            if(h2->val<h1->val){
                t->next=h2;
                t=h2;
                h2=h2->next;
            }else{
                t->next=h1;
                t=h1;
                h1=h1->next;
            }
        }
        if(h2==NULL){
            t->next=h1;
        }
        if(h1==NULL){
            t->next=h2;
        }
        return final_head;
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists) {
        if(lists.size()==0){
            return NULL;
        }
        ListNode*head=lists[0];
        for(int i=1;i<lists.size();i++){
            ListNode*curr=lists[i];
            head=merge(head,curr);
        }
        return head;
    }
};
