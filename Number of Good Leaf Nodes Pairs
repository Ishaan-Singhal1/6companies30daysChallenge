/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(NULL), right(NULL) {}
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */

class Solution {
public:
    int ans = 0;
    int countPairs(TreeNode* root, int distance) {
        dfs(root, distance);
        return ans;
    }

    vector<int> dfs(TreeNode* root, int d) {
        vector<int> temp;
        if (root == NULL) {
            return temp;
        }

        vector<int> left = dfs(root->left, d);
        vector<int> right = dfs(root->right, d);

        if (left.size() == 0 && right.size() == 0) {
            temp.push_back(1);
            return temp;
        }

        for (int i = 0; i < left.size(); i++) {
            for (int j = 0; j < right.size(); j++) {
                if (left[i] + right[j] <= d) {
                    ans++;
                }
            }
        }

        for (int i = 0; i < left.size(); i++) {
            left[i]++;
            temp.push_back(left[i]);
        }

        for (int i = 0; i < right.size(); i++) {
            right[i]++;
            temp.push_back(right[i]);
        }

        return temp;
    }
};
