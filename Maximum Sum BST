/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    class data {
    public:
        int maxi;
        int mini;
        bool isBst;
        int sum;
    };

    data solve(TreeNode* root, int& result) {
        if (root == nullptr) {
            return { INT_MIN, INT_MAX, true, 0 };
        }

        data left = solve(root->left, result);
        data right = solve(root->right, result);
        data currNode;

        currNode.sum = left.sum + right.sum + root->val;
        currNode.maxi = max(root->val, right.maxi);
        currNode.mini = min(root->val, left.mini);

        if (left.isBst && right.isBst && (root->val > left.maxi && root->val < right.mini)) {
            currNode.isBst = true;
        }
        else {
            currNode.isBst = false;
        }

        if (currNode.isBst) {
            result = max(result, currNode.sum);
        }
        return currNode;
    }

    int maxSumBST(TreeNode* root) {
        int maxSum = 0;
        data result = solve(root, maxSum);
        return maxSum;
    }
};
