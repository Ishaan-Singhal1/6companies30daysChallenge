class Solution {
public:
    int solve(string& s, unordered_map<string, int>& mpp, vector<int>& dp, int index) {
        if (index >= s.size()) {
            return 0;
        }

        if (dp[index] != -1) {
            return dp[index];
        }

        string temp = "";
        int minExtra = s.size();

        for (int cutIdx = index; cutIdx < s.size(); cutIdx++) {
            temp.push_back(s[cutIdx]);
            int currExtra = (mpp.count(temp)) ? 0 : temp.size();
            int nextExtra = solve(s, mpp, dp, cutIdx + 1);
            int totalExtra = currExtra + nextExtra;
            minExtra = min(minExtra, totalExtra);
        }

        return dp[index] = minExtra;
    }

    int minExtraChar(string s, vector<string>& dictionary) {
        vector<int> dp(s.size(), -1);
        unordered_map<string, int> mpp;

        for (string& word : dictionary) {
            mpp[word]++;
        }

        int ans = solve(s, mpp, dp, 0);
        return ans;
    }
};
