class Solution {
public:
    vector<string> findHighAccessEmployees(vector<vector<string>>& access_times) {
        vector<string> ans;
        unordered_map <string, vector<string>>mpp;
        for(int i=0;i<access_times.size();i++){
            mpp[access_times[i][0]].push_back(access_times[i][1]);
        }

        for(auto it : mpp){
            int n=it.second.size();
            if(n<3){
                continue;
            }
            sort(it.second.begin(),it.second.end());
            for(int i=0;i<n-2;i++){
            string first = it.second[i];
            string third = it.second[i+2];
            int firstHour = stoi(first.substr(0,2));
            int firstMinute = stoi(first.substr(2));
            int thirdHour = stoi(third.substr(0,2));
            int thirdMinute = stoi(third.substr(2));
            
            int timeDifference = (thirdHour - firstHour) * 60 + (thirdMinute - firstMinute);

            if (timeDifference < 60) {
                ans.push_back(it.first);
                break;
            }
            }
        }
        return ans;
    }
};
