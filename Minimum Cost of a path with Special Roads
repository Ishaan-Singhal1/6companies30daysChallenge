class Solution {
public:
    int minimumCost(vector<int>& start, vector<int>& target, vector<vector<int>>& specialRoads) {
        set<vector<int>> vertices;
        map<vector<int>,int> dist;
        map<vector<int>,int> specialdist;
         
        vertices.insert(start);   
        dist[start]=INT_MAX;
        vertices.insert(target);  
        dist[target]=INT_MAX;
        
        for(int i=0;i<specialRoads.size();++i){
            int x1=specialRoads[i][0];
            int y1=specialRoads[i][1];
            int x2=specialRoads[i][2];
            int y2=specialRoads[i][3];
            int dis=specialRoads[i][4];
            
            vertices.insert({x1,y1});
            vertices.insert({x2,y2});
            
            if(specialdist.find({x1,y1,x2,y2})==specialdist.end()){       
                specialdist[{x1,y1,x2,y2}]=dis;
            }
            else{
                specialdist[{x1,y1,x2,y2}]=min(specialdist[{x1,y1,x2,y2}],dis);
            }
                
            dist[{x1,y1}]=INT_MAX;
            dist[{x2,y2}]=INT_MAX;       
        }
        
        priority_queue<vector<int>,vector<vector<int>>, greater<vector<int>>> q;
        q.push({0,start[0],start[1]});
        
        while(!q.empty()){
              
            vector<int> u=q.top(); q.pop();
            int x1=u[1];
            int y1=u[2];
            int curr_dis=u[0];
        
            if(x1==target[0] && y1==target[1]){ 
                return curr_dis;
            }
            for(auto it : vertices){
                vector<int> v = it;
                if(u==v){
                    continue;
                }

                int x2=v[0];
                int y2=v[1];
                int cost1=(abs(x2-x1) + abs(y2-y1)); 
                int cost2=INT_MAX;
                
                if(specialdist.find({x1,y1,x2,y2})!=specialdist.end()){
                   cost2=specialdist[{x1,y1,x2,y2}];
                }
                int weight=min(cost1,cost2);
                if(curr_dis + weight < dist[{x2,y2}] ){ 
                    dist[{x2,y2}]=curr_dis + weight;
                    q.push({dist[{x2,y2}],x2,y2});
                }                 
            }
        }
        return 0;
    }
};
